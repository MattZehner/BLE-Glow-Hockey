
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module UART_Nios(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// RS232 //////////
	UART_CTS,
	UART_RTS,
	UART_RXD,
	UART_TXD,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// RS232 //////////
input 		          		UART_CTS;
output		          		UART_RTS;
input 		          		UART_RXD;
output		          		UART_TXD;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;


//=======================================================
//  REG/WIRE declarations
//=======================================================

// reset
reg [19:0]      Cont;
reg             Reset_N;

// PLL
wire				Clk_Core;
wire 				Clk_Sdram;

//=======================================================
//  Structural coding
//=======================================================


// reset
always@(posedge CLOCK_50)  begin
	if(Cont != 20'hFFFFF) begin
		Cont <= Cont + 1;
		Reset_N <= 1'b0;
	end
	else
	    Reset_N <= 1'b1;
end

// PLL

assign DRAM_CLK = Clk_Sdram;

PLL	PLL_inst (
	.inclk0 ( CLOCK_50 ),
	.c0 ( Clk_Core ),
	.c1 ( Clk_Sdram )
	);


    uart_kernel u0 (
        .clk_clk                      (Clk_Core),                      //                      clk.clk
        .reset_reset_n                (Reset_N),                //                    reset.reset_n
        .sdram_controller_wire_addr          (DRAM_ADDR),          //        sdram_controller_wire.addr
        .sdram_controller_wire_ba            (DRAM_BA),            //                             .ba
        .sdram_controller_wire_cas_n         (DRAM_CAS_N),         //                             .cas_n
        .sdram_controller_wire_cke           (DRAM_CKE),           //                             .cke
        .sdram_controller_wire_cs_n          (DRAM_CS_N),          //                             .cs_n
        .sdram_controller_wire_dq            (DRAM_DQ),            //                             .dq
        .sdram_controller_wire_dqm           (DRAM_DQM),           //                             .dqm
        .sdram_controller_wire_ras_n         (DRAM_RAS_N),         //                             .ras_n
        .sdram_controller_wire_we_n          (DRAM_WE_N),          //                             .we_n
        .uart_external_connection_rxd (UART_RXD), // uart_external_connection.rxd
        .uart_external_connection_txd (UART_TXD)  //                         .txd
    );

endmodule
