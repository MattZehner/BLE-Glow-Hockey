
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <math.h>

#include "system.h"
#include "alt_types.h"
#include "altera_avalon_uart_regs.h"
#include "sys\alt_irq.h"
#include <stdio.h>

#include "Color_Qsys.h"
//#include "../ColorAnalysis_bsp/system.h"


alt_u8 txdata = 0;	//send
alt_u8 rxdata = 0;	//receive
unsigned int *RGBbase = COLOR_BASE;


// 串口发送
void IRQ_UART_Send(unsigned char data){

	//rxdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
	txdata = data;

	// judge if TRDY(T ready) is true
	while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&
			ALTERA_AVALON_UART_STATUS_TRDY_MSK)){
		;	//do nothing
	}

	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, txdata);

}

// 延时
void delayTime(uint32_t x){
    double temp = 12.87346;
    uint32_t i = 0;
    for(i = 0; i < x; i++){
        temp = sqrt(pow(98765.234, 0.5)+pow(temp, 0.8));
    }
}

// 发送RGB值
void sendRGB(unsigned char R, unsigned char G, unsigned char B){
	IRQ_UART_Send(0x02);
	delayTime(10);
	IRQ_UART_Send(0x03);
	delayTime(10);
	IRQ_UART_Send(R);
	delayTime(10);
	IRQ_UART_Send(G);
	delayTime(10);
	IRQ_UART_Send(B);
	delayTime(10);
}



struct RGB GetColor(){
	struct RGB myRGB;
	while(1){
		unsigned int rawData = *RGBbase;
		myRGB.isValid = ((rawData>>31)==1);
		if(myRGB.isValid == 1){
		myRGB.BValue = (rawData & 0xFF);
		myRGB.GValue = ((rawData>>8) & 0xFF);
		myRGB.RValue = ((rawData>>16) & 0xFF);
		break;
		}
	}
	return myRGB;
}

int main()
{

	//clear status register
	IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);

	// write control register
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0x80);	//enable receive ready interrupt


	unsigned char R = 0x40;
	unsigned char G = 0x50;
	unsigned char B = 0x9f;

	printf("Hello from NIOS II!\n");

	while(1){
		sendRGB(R, G, B);
		printf("R %u G %u B %u\n", R, G, B);
		R += 0x13;
		G += 0x40;
		B += 0x26;
	}

	return 0;
}









/*

int main(){
  printf("Hello from Nios II!\n");
  while(1){
	  struct RGB myRGB = GetColor();
	  //if(myRGB.isValid == 1){
	  int red;
	  int green;
	  int blue;
	  double dred = (double) myRGB.RValue;
	  double dgreen = (double) myRGB.GValue;
	  double dblue = (double) myRGB.BValue;
	  //red = (int) (-0.0098*dred*dred+3.9431*dred-143.22);
	  red = (int) (-0.0062*dred*dred+3.1126*dred-131.16);
	  if(red > 255)
		  red = 255;
	  if(red < 0)
		  red = 0;
	  //green = (int) (-0.008*dgreen*dgreen+3.7674*dgreen-166.82);
	  green = (int) (-0.006*dgreen*dgreen+3.2612*dgreen-145.38);
	  if(green > 255)
	  	  green = 255;
	  if(green < 0)
		  green = 0;
	  //blue = (int) (-0.0098*dblue*dblue+4.6305*dblue-291.92);
	  blue = (int) (-0.0004*dblue*dblue*dblue+0.2215*dblue*dblue-33.719*dblue+1689);
	  if(blue > 255)
		  blue = 255;
	  if(blue < 0)
		  blue = 0;
	  //if(red>0 && green>0 && blue>0)
	  printf("R value: %d, G value: %d, B Value: %d\n", red, green, blue);
	  int x, y;
	  for(x=1000;x>0;x--)
		  for(y=1000;y>0;y--);
	  //}
  }

  return 0;
}
*/

